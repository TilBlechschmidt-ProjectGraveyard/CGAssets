@import "shapes";
@import "const";

@mixin score-container-hidden-props {
    height: 0;
    opacity: 0;
}

@mixin score-container-shown-props {
    height: $height;
    opacity: 1;
}

.score-container {
    @include score-container-hidden-props;
    padding-top: 50px;
    line-height: $height;
    font-size: $fontSize;
}

@mixin score-hidden-props {
    width: $trapezoidWidth * 2;
    opacity: 0;
    color: transparent;
}

@mixin score-shown-props {
    width: $scoreWidth;
    opacity: 1;
    color: #000;
}

.score {
    @include score-hidden-props;

    background-color: $scoreBG;
    text-align: center;
    box-shadow: 0 5px 2px -2px #757575;
    z-index: 1;
}

body.shown div.container div.score {
    @include score-hidden-props;

    animation: score-show;
    animation-duration: 500ms;
    animation-delay: 500ms;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;
}

body.hidden div.container div.score {
    @include score-shown-props;

    animation: score-hide;
    animation-duration: 500ms;
    animation-delay: 500ms;
    animation-timing-function: ease-in;
    animation-fill-mode: forwards;
}

@keyframes score-show {
    0% { @include score-hidden-props }
    100% { @include score-shown-props }
}
@keyframes score-hide {
    0% { @include score-shown-props }
    100% { @include score-hidden-props }
}

.score:before {
    padding-left: $scorePadding * 3;
    padding-right: $scorePadding;
    content: attr(data-team1);
}

.score:after {
    padding-right: $scorePadding * 3;
    padding-left: $scorePadding;
    content: attr(data-team2);
}

.trapezoid {
    border-left: 0;
    border-right: 0;
}

body.shown div.container .trapezoid.right {
    animation: right-trapezoid-show;
    animation-duration: 500ms;
    animation-delay: 500ms;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;
}

body.shown div.container .trapezoid.left {
    animation: left-trapezoid-show;
    animation-duration: 500ms;
    animation-delay: 500ms;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;
}

body.hidden div.container .trapezoid.right {
    @include right-trapezoid-shown-props;
    animation: right-trapezoid-hide;
    animation-duration: 500ms;
    animation-delay: 500ms;
    animation-timing-function: ease-in;
    animation-fill-mode: forwards;
}

body.hidden div.container .trapezoid.left {
    @include left-trapezoid-shown-props;
    animation: left-trapezoid-hide;
    animation-duration: 500ms;
    animation-delay: 500ms;
    animation-timing-function: ease-in;
    animation-fill-mode: forwards;
}

@mixin team-shown-props {
    opacity: 1;
    width: $height * 2;
    color: $textColor;
}
@mixin team-hidden-props {
    opacity: 0;
    width: 0;
    color: $accentColor;
}

.team {
    @include team-hidden-props;
    background-color: $accentColor;

    text-align: center;
    font-weight: normal;
    font-size: $fontSize - $fontSize/7;
    z-index: 10;
}

body.shown div.container div.team {
    @include team-hidden-props;

    animation: team-show;
    animation-timing-function: linear;
    animation-duration: 500ms;
    animation-fill-mode: forwards;
}

body.hidden div.container div.team {
    @include team-shown-props;

    animation: team-hide;
    animation-timing-function: ease-in;
    animation-duration: 500ms;
    animation-delay: 500ms;
    animation-fill-mode: forwards;
}

@keyframes team-show {
    0% { @include team-hidden-props; }
    100% { @include team-shown-props; }
}

@keyframes team-hide {
    0% { @include team-shown-props; }
    100% { @include team-hidden-props; }
}

.team.left {
    border-top-left-radius: $scoreBorderRadius;
    border-bottom-left-radius: $scoreBorderRadius;
}

.team.right {
    border-top-right-radius: $scoreBorderRadius;
    border-bottom-right-radius: $scoreBorderRadius;
}

.clock {
    z-index: 0;
    position: absolute;
    width: $scoreWidth - $clockInset;

    text-align: center;
    line-height: 0;
    font-size: $clockInset/2;

    // Remove styles from fieldset
    border: none;
    margin: 0;
    padding: 0;

    color: white;

    div {
        opacity: 0;
    }

    // Make it a trapezoid
    // border-top filled by clock-fade-in
    border-top: 0 solid $clockBG;
    border-left: $clockInset/2 solid transparent;
    border-right: $clockInset/2 solid transparent;
}

.clock.shown {
    animation: clock-fade-in $animationDuration;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;

    legend {
        animation: legend-fade-in $animationDuration;
        animation-timing-function: ease-out;
        animation-fill-mode: forwards;
    }
}

.timelabel {
    text-align: center;
    position: relative;
    top: -33px;
}

.timelabel.shown {
    animation: timelabel-fade-in $animationDuration;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;
}

@keyframes timelabel-fade-in {
    50% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

@keyframes timelabel-fade-out {
    0% {
        opacity: 1;
    }
    50% {
        opacity: 0;
    }
}

.clock.hide {
    animation: clock-fade-out $animationDuration;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;

    legend {
        animation: legend-fade-out $animationDuration;
        animation-timing-function: ease-out;
        animation-fill-mode: forwards;
    }
}

@keyframes clock-fade-in {
    50% {
        border-top: 0 solid $clockBG;
        line-height: 0;
    }
    100% {
        border-top: $clockInset/1.5 solid $clockBG;
        line-height: $clockInset/1.5;
    }
}

@keyframes clock-fade-out {
    0% {
        border-top: $clockInset/1.5 solid $clockBG;
        line-height: $clockInset/1.5;
    }
    50% {
        border-top: 0 solid $clockBG;
        line-height: 0;
    }
}

.score-container.shown {
    @include score-container-shown-props;
}

body.hidden div.score-container {
    animation: score-container-fade-out;
    animation-duration: $animationDuration;
    animation-fill-mode: forwards;
}

body.hidden div.clock {
    animation: clock-fade-out;
    animation-duration: $animationDuration;
    animation-fill-mode: forwards;
}

body.hidden div.timelabel {
    animation: timelabel-fade-out;
    animation-duration: $animationDuration;
    animation-fill-mode: forwards;
}
